// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { DotBimBufferColor } from './dot-bim-buffer-color';
import { DotBimBufferInfo } from './dot-bim-buffer-info';
import { DotBimBufferRotation } from './dot-bim-buffer-rotation';
import { DotBimBufferVector } from './dot-bim-buffer-vector';


export class DotBimBufferElement {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init( i: number, bb: flatbuffers.ByteBuffer ): DotBimBufferElement {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsDotBimBufferElement( bb: flatbuffers.ByteBuffer, obj?: DotBimBufferElement ): DotBimBufferElement {
    return ( obj || new DotBimBufferElement() ).__init( bb.readInt32( bb.position() ) + bb.position(), bb );
  }

  static getSizePrefixedRootAsDotBimBufferElement( bb: flatbuffers.ByteBuffer, obj?: DotBimBufferElement ): DotBimBufferElement {
    bb.setPosition( bb.position() + flatbuffers.SIZE_PREFIX_LENGTH );
    return ( obj || new DotBimBufferElement() ).__init( bb.readInt32( bb.position() ) + bb.position(), bb );
  }

  type(): string | null
  type( optionalEncoding: flatbuffers.Encoding ): string | Uint8Array | null
  type( optionalEncoding?: any ): string | Uint8Array | null {
    const offset = this.bb!.__offset( this.bb_pos, 4 );
    return offset ? this.bb!.__string( this.bb_pos + offset, optionalEncoding ) : null;
  }

  info( index: number, obj?: DotBimBufferInfo ): DotBimBufferInfo | null {
    const offset = this.bb!.__offset( this.bb_pos, 6 );
    return offset ? ( obj || new DotBimBufferInfo() ).__init( this.bb!.__indirect( this.bb!.__vector( this.bb_pos + offset ) + index * 4 ), this.bb! ) : null;
  }

  infoLength(): number {
    const offset = this.bb!.__offset( this.bb_pos, 6 );
    return offset ? this.bb!.__vector_len( this.bb_pos + offset ) : 0;
  }

  color( obj?: DotBimBufferColor ): DotBimBufferColor | null {
    const offset = this.bb!.__offset( this.bb_pos, 8 );
    return offset ? ( obj || new DotBimBufferColor() ).__init( this.bb!.__indirect( this.bb_pos + offset ), this.bb! ) : null;
  }

  facecolors( index: number ): number | null {
    const offset = this.bb!.__offset( this.bb_pos, 10 );
    return offset ? this.bb!.readInt32( this.bb!.__vector( this.bb_pos + offset ) + index * 4 ) : 0;
  }

  facecolorsLength(): number {
    const offset = this.bb!.__offset( this.bb_pos, 10 );
    return offset ? this.bb!.__vector_len( this.bb_pos + offset ) : 0;
  }

  facecolorsArray(): Int32Array | null {
    const offset = this.bb!.__offset( this.bb_pos, 10 );
    return offset ? new Int32Array( this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector( this.bb_pos + offset ), this.bb!.__vector_len( this.bb_pos + offset ) ) : null;
  }

  guid(): string | null
  guid( optionalEncoding: flatbuffers.Encoding ): string | Uint8Array | null
  guid( optionalEncoding?: any ): string | Uint8Array | null {
    const offset = this.bb!.__offset( this.bb_pos, 12 );
    return offset ? this.bb!.__string( this.bb_pos + offset, optionalEncoding ) : null;
  }

  rotation( obj?: DotBimBufferRotation ): DotBimBufferRotation | null {
    const offset = this.bb!.__offset( this.bb_pos, 14 );
    return offset ? ( obj || new DotBimBufferRotation() ).__init( this.bb!.__indirect( this.bb_pos + offset ), this.bb! ) : null;
  }

  vector( obj?: DotBimBufferVector ): DotBimBufferVector | null {
    const offset = this.bb!.__offset( this.bb_pos, 16 );
    return offset ? ( obj || new DotBimBufferVector() ).__init( this.bb!.__indirect( this.bb_pos + offset ), this.bb! ) : null;
  }

  meshid(): number {
    const offset = this.bb!.__offset( this.bb_pos, 18 );
    return offset ? this.bb!.readInt32( this.bb_pos + offset ) : 0;
  }

  static startDotBimBufferElement( builder: flatbuffers.Builder ) {
    builder.startObject( 8 );
  }

  static addType( builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 0, typeOffset, 0 );
  }

  static addInfo( builder: flatbuffers.Builder, infoOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 1, infoOffset, 0 );
  }

  static createInfoVector( builder: flatbuffers.Builder, data: flatbuffers.Offset[] ): flatbuffers.Offset {
    builder.startVector( 4, data.length, 4 );
    for ( let i = data.length - 1; i >= 0; i-- ) {
      builder.addOffset( data[i]! );
    }
    return builder.endVector();
  }

  static startInfoVector( builder: flatbuffers.Builder, numElems: number ) {
    builder.startVector( 4, numElems, 4 );
  }

  static addColor( builder: flatbuffers.Builder, colorOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 2, colorOffset, 0 );
  }

  static addFacecolors( builder: flatbuffers.Builder, facecolorsOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 3, facecolorsOffset, 0 );
  }

  static createFacecolorsVector( builder: flatbuffers.Builder, data: number[] | Int32Array ): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createFacecolorsVector( builder: flatbuffers.Builder, data: number[] | Uint8Array ): flatbuffers.Offset;
  static createFacecolorsVector( builder: flatbuffers.Builder, data: number[] | Int32Array | Uint8Array ): flatbuffers.Offset {
    builder.startVector( 4, data.length, 4 );
    for ( let i = data.length - 1; i >= 0; i-- ) {
      builder.addInt32( data[i]! );
    }
    return builder.endVector();
  }

  static startFacecolorsVector( builder: flatbuffers.Builder, numElems: number ) {
    builder.startVector( 4, numElems, 4 );
  }

  static addGuid( builder: flatbuffers.Builder, guidOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 4, guidOffset, 0 );
  }

  static addRotation( builder: flatbuffers.Builder, rotationOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 5, rotationOffset, 0 );
  }

  static addVector( builder: flatbuffers.Builder, vectorOffset: flatbuffers.Offset ) {
    builder.addFieldOffset( 6, vectorOffset, 0 );
  }

  static addMeshid( builder: flatbuffers.Builder, meshid: number ) {
    builder.addFieldInt32( 7, meshid, 0 );
  }

  static endDotBimBufferElement( builder: flatbuffers.Builder ): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

}
