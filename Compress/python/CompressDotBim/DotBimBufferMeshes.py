# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CompressDotBim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DotBimBufferMeshes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DotBimBufferMeshes()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDotBimBufferMeshes(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DotBimBufferMeshes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DotBimBufferMeshes
    def Meshid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DotBimBufferMeshes
    def Coordinates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DotBimBufferMeshes
    def CoordinatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # DotBimBufferMeshes
    def CoordinatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DotBimBufferMeshes
    def CoordinatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DotBimBufferMeshes
    def Indices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DotBimBufferMeshes
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DotBimBufferMeshes
    def IndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DotBimBufferMeshes
    def IndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def DotBimBufferMeshesStart(builder):
    builder.StartObject(3)

def Start(builder):
    DotBimBufferMeshesStart(builder)

def DotBimBufferMeshesAddMeshid(builder, meshid):
    builder.PrependInt32Slot(0, meshid, 0)

def AddMeshid(builder, meshid):
    DotBimBufferMeshesAddMeshid(builder, meshid)

def DotBimBufferMeshesAddCoordinates(builder, coordinates):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordinates), 0)

def AddCoordinates(builder, coordinates):
    DotBimBufferMeshesAddCoordinates(builder, coordinates)

def DotBimBufferMeshesStartCoordinatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCoordinatesVector(builder, numElems: int) -> int:
    return DotBimBufferMeshesStartCoordinatesVector(builder, numElems)

def DotBimBufferMeshesAddIndices(builder, indices):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)

def AddIndices(builder, indices):
    DotBimBufferMeshesAddIndices(builder, indices)

def DotBimBufferMeshesStartIndicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIndicesVector(builder, numElems: int) -> int:
    return DotBimBufferMeshesStartIndicesVector(builder, numElems)

def DotBimBufferMeshesEnd(builder):
    return builder.EndObject()

def End(builder):
    return DotBimBufferMeshesEnd(builder)
