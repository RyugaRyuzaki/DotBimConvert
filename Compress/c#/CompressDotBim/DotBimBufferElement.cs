// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace CompressDotBim
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DotBimBufferElement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static DotBimBufferElement GetRootAsDotBimBufferElement(ByteBuffer _bb) { return GetRootAsDotBimBufferElement(_bb, new DotBimBufferElement()); }
  public static DotBimBufferElement GetRootAsDotBimBufferElement(ByteBuffer _bb, DotBimBufferElement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DotBimBufferElement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  public CompressDotBim.DotBimBufferInfo? Info(int j) { int o = __p.__offset(6); return o != 0 ? (CompressDotBim.DotBimBufferInfo?)(new CompressDotBim.DotBimBufferInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InfoLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public CompressDotBim.DotBimBufferColor? Color { get { int o = __p.__offset(8); return o != 0 ? (CompressDotBim.DotBimBufferColor?)(new CompressDotBim.DotBimBufferColor()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Facecolors(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FacecolorsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFacecolorsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetFacecolorsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetFacecolorsArray() { return __p.__vector_as_array<int>(10); }
  public string Guid { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGuidBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGuidBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGuidArray() { return __p.__vector_as_array<byte>(12); }
  public CompressDotBim.DotBimBufferRotation? Rotation { get { int o = __p.__offset(14); return o != 0 ? (CompressDotBim.DotBimBufferRotation?)(new CompressDotBim.DotBimBufferRotation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public CompressDotBim.DotBimBufferVector? Vector { get { int o = __p.__offset(16); return o != 0 ? (CompressDotBim.DotBimBufferVector?)(new CompressDotBim.DotBimBufferVector()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int Meshid { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CompressDotBim.DotBimBufferElement> CreateDotBimBufferElement(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset infoOffset = default(VectorOffset),
      Offset<CompressDotBim.DotBimBufferColor> colorOffset = default(Offset<CompressDotBim.DotBimBufferColor>),
      VectorOffset facecolorsOffset = default(VectorOffset),
      StringOffset guidOffset = default(StringOffset),
      Offset<CompressDotBim.DotBimBufferRotation> rotationOffset = default(Offset<CompressDotBim.DotBimBufferRotation>),
      Offset<CompressDotBim.DotBimBufferVector> vectorOffset = default(Offset<CompressDotBim.DotBimBufferVector>),
      int meshid = 0) {
    builder.StartTable(8);
    DotBimBufferElement.AddMeshid(builder, meshid);
    DotBimBufferElement.AddVector(builder, vectorOffset);
    DotBimBufferElement.AddRotation(builder, rotationOffset);
    DotBimBufferElement.AddGuid(builder, guidOffset);
    DotBimBufferElement.AddFacecolors(builder, facecolorsOffset);
    DotBimBufferElement.AddColor(builder, colorOffset);
    DotBimBufferElement.AddInfo(builder, infoOffset);
    DotBimBufferElement.AddType(builder, typeOffset);
    return DotBimBufferElement.EndDotBimBufferElement(builder);
  }

  public static void StartDotBimBufferElement(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddInfo(FlatBufferBuilder builder, VectorOffset infoOffset) { builder.AddOffset(1, infoOffset.Value, 0); }
  public static VectorOffset CreateInfoVector(FlatBufferBuilder builder, Offset<CompressDotBim.DotBimBufferInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInfoVectorBlock(FlatBufferBuilder builder, Offset<CompressDotBim.DotBimBufferInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<CompressDotBim.DotBimBufferInfo>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<CompressDotBim.DotBimBufferInfo>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColor(FlatBufferBuilder builder, Offset<CompressDotBim.DotBimBufferColor> colorOffset) { builder.AddOffset(2, colorOffset.Value, 0); }
  public static void AddFacecolors(FlatBufferBuilder builder, VectorOffset facecolorsOffset) { builder.AddOffset(3, facecolorsOffset.Value, 0); }
  public static VectorOffset CreateFacecolorsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFacecolorsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFacecolorsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFacecolorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFacecolorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGuid(FlatBufferBuilder builder, StringOffset guidOffset) { builder.AddOffset(4, guidOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<CompressDotBim.DotBimBufferRotation> rotationOffset) { builder.AddOffset(5, rotationOffset.Value, 0); }
  public static void AddVector(FlatBufferBuilder builder, Offset<CompressDotBim.DotBimBufferVector> vectorOffset) { builder.AddOffset(6, vectorOffset.Value, 0); }
  public static void AddMeshid(FlatBufferBuilder builder, int meshid) { builder.AddInt(7, meshid, 0); }
  public static Offset<CompressDotBim.DotBimBufferElement> EndDotBimBufferElement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CompressDotBim.DotBimBufferElement>(o);
  }
}


static public class DotBimBufferElementVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Info*/, CompressDotBim.DotBimBufferInfoVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 8 /*Color*/, CompressDotBim.DotBimBufferColorVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Facecolors*/, 4 /*int*/, false)
      && verifier.VerifyString(tablePos, 12 /*Guid*/, false)
      && verifier.VerifyTable(tablePos, 14 /*Rotation*/, CompressDotBim.DotBimBufferRotationVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*Vector*/, CompressDotBim.DotBimBufferVectorVerify.Verify, false)
      && verifier.VerifyField(tablePos, 18 /*Meshid*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
