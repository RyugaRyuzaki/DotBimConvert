// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DotBimBufferRotation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DotBimBufferRotation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDotBimBufferRotation(bb:flatbuffers.ByteBuffer, obj?:DotBimBufferRotation):DotBimBufferRotation {
  return (obj || new DotBimBufferRotation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDotBimBufferRotation(bb:flatbuffers.ByteBuffer, obj?:DotBimBufferRotation):DotBimBufferRotation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DotBimBufferRotation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

qx():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

qy():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

qz():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

qw():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startDotBimBufferRotation(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addQx(builder:flatbuffers.Builder, qx:number) {
  builder.addFieldFloat32(0, qx, 0.0);
}

static addQy(builder:flatbuffers.Builder, qy:number) {
  builder.addFieldFloat32(1, qy, 0.0);
}

static addQz(builder:flatbuffers.Builder, qz:number) {
  builder.addFieldFloat32(2, qz, 0.0);
}

static addQw(builder:flatbuffers.Builder, qw:number) {
  builder.addFieldFloat32(3, qw, 0.0);
}

static endDotBimBufferRotation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDotBimBufferRotation(builder:flatbuffers.Builder, qx:number, qy:number, qz:number, qw:number):flatbuffers.Offset {
  DotBimBufferRotation.startDotBimBufferRotation(builder);
  DotBimBufferRotation.addQx(builder, qx);
  DotBimBufferRotation.addQy(builder, qy);
  DotBimBufferRotation.addQz(builder, qz);
  DotBimBufferRotation.addQw(builder, qw);
  return DotBimBufferRotation.endDotBimBufferRotation(builder);
}
}
