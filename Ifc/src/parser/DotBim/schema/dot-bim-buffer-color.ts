// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DotBimBufferColor {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DotBimBufferColor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDotBimBufferColor(bb:flatbuffers.ByteBuffer, obj?:DotBimBufferColor):DotBimBufferColor {
  return (obj || new DotBimBufferColor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDotBimBufferColor(bb:flatbuffers.ByteBuffer, obj?:DotBimBufferColor):DotBimBufferColor {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DotBimBufferColor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

r():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

g():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

b():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

a():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startDotBimBufferColor(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addR(builder:flatbuffers.Builder, r:number) {
  builder.addFieldInt32(0, r, 0);
}

static addG(builder:flatbuffers.Builder, g:number) {
  builder.addFieldInt32(1, g, 0);
}

static addB(builder:flatbuffers.Builder, b:number) {
  builder.addFieldInt32(2, b, 0);
}

static addA(builder:flatbuffers.Builder, a:number) {
  builder.addFieldInt32(3, a, 0);
}

static endDotBimBufferColor(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDotBimBufferColor(builder:flatbuffers.Builder, r:number, g:number, b:number, a:number):flatbuffers.Offset {
  DotBimBufferColor.startDotBimBufferColor(builder);
  DotBimBufferColor.addR(builder, r);
  DotBimBufferColor.addG(builder, g);
  DotBimBufferColor.addB(builder, b);
  DotBimBufferColor.addA(builder, a);
  return DotBimBufferColor.endDotBimBufferColor(builder);
}
}
