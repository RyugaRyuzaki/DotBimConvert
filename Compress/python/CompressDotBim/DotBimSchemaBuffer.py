# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CompressDotBim

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DotBimSchemaBuffer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DotBimSchemaBuffer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDotBimSchemaBuffer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DotBimSchemaBuffer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DotBimSchemaBuffer
    def Schemaversion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DotBimSchemaBuffer
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DotBimSchemaBuffer
    def Meshes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CompressDotBim.DotBimBufferMeshes import DotBimBufferMeshes
            obj = DotBimBufferMeshes()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DotBimSchemaBuffer
    def MeshesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DotBimSchemaBuffer
    def MeshesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # DotBimSchemaBuffer
    def Elements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CompressDotBim.DotBimBufferElement import DotBimBufferElement
            obj = DotBimBufferElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DotBimSchemaBuffer
    def ElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DotBimSchemaBuffer
    def ElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def DotBimSchemaBufferStart(builder):
    builder.StartObject(4)

def Start(builder):
    DotBimSchemaBufferStart(builder)

def DotBimSchemaBufferAddSchemaversion(builder, schemaversion):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(schemaversion), 0)

def AddSchemaversion(builder, schemaversion):
    DotBimSchemaBufferAddSchemaversion(builder, schemaversion)

def DotBimSchemaBufferAddInfo(builder, info):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)

def AddInfo(builder, info):
    DotBimSchemaBufferAddInfo(builder, info)

def DotBimSchemaBufferAddMeshes(builder, meshes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(meshes), 0)

def AddMeshes(builder, meshes):
    DotBimSchemaBufferAddMeshes(builder, meshes)

def DotBimSchemaBufferStartMeshesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMeshesVector(builder, numElems: int) -> int:
    return DotBimSchemaBufferStartMeshesVector(builder, numElems)

def DotBimSchemaBufferAddElements(builder, elements):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(elements), 0)

def AddElements(builder, elements):
    DotBimSchemaBufferAddElements(builder, elements)

def DotBimSchemaBufferStartElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementsVector(builder, numElems: int) -> int:
    return DotBimSchemaBufferStartElementsVector(builder, numElems)

def DotBimSchemaBufferEnd(builder):
    return builder.EndObject()

def End(builder):
    return DotBimSchemaBufferEnd(builder)
